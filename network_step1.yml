AWSTemplateFormatVersion: "2010-09-09"
Description: Network resource template part1
Resources:
  sbcntrVpc:
    Type: AWS::EC2::VPC
    Properties:
      CiderBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: sbcntrVpc
  # コンテナアプリ
  ## コンテナアプリ用プライベートサブネット
  sbcntrSubnetPrivateContainer1A:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.8.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: sbcntr-subnet-private-container-1a
          - Key: Type
            Value: Isolated
  sbcntrSubnetPrivateContainer1C:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.9.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: sbcntr-subnet-private-container-1c
        - Key: Type
          Value: Isolated
  ## コンテナアプリ用ルートテーブル
  sbcntrRouteApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: sbcntrVpc
      Tags:
        - Key: Name
          Value: sbcntr-route-app
  ## コンテナサブネットへルート紐づけ
  sbcntrRouteAppAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteApp
      SubnetId:
        Ref: sbcntrSubnetPrivateContainer1A
  sbcntrRouteAppAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteApp
      SubnetId:
        Ref: sbcntrSubnetPrivateContainer1C

  # DB
  ## DB用のプライベートサブネット
  sbcntrSubnetPrivateDb1A:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.16.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: sbcntr-subnet-private-db-1a
        - Key: Type
          Value: Isolated
  sbcntrSubnetPrivateDb1C:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.17.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: sbcntr-subnet-private-db-1c
        - Key: Type
          Value: Isolated
  ## DB用ルートテーブル
  sbcntrRouteDb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: sbcntrVpc
      Tags:
        - Key: Name
          Value: sbcntr-route-db
  ## DBサブネットへルート紐づけ
  sbcntrRouteDbAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteDb
      SubnetId:
        Ref: sbcntrSubnetPrivateDb1A
  sbcntrRouteDbAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteDb
      SubnetId:
        Ref: sbcntrSubnetPrivateDb1C

  # Ingress
  ## Ingress用のパブリックサブネット
  sbcntrSubnetPublicIngress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.0.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sbcntr-subnet-public-ingress-1a
        - Key: Type
          Value: Public
  sbcntrSubnetPublicIngress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.16.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sbcntr-subnet-public-ingress-1c
        - Key: Type
          Value: Public
  ## Ingress用ルートテーブル
  sbcntrRouteIngress:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: sbcntrVpc
      Tags:
        - Key: Name
          Value: sbcntr-route-ingress
  ## Ingressサブネットへルート紐づけ
  sbcntrRouteIngressAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteIngress
      SubnetId:
        Ref: sbcntrSubnetPublicIngress1A
  sbcntrRouteIngressAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteIngress
      SubnetId:
        Ref: sbcntrSubnetPublicIngress1C
  ## Ingress用ルートテーブルのデフォルトルート
  sbcntrRouteIngressDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: sbcntrRouteIngress
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: sbcntrIgw
      DependsOn:
        - sbcntrVpcgwAttachment
      
  # 管理用サーバー
  ## 管理用のパブリックサブネット
  sbcntrSubnetPublicManagement1A:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.240.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sbcntr-subnet-public-management-1a
        - Key: Type
          Value: Public
  sbcntrSubnetPublicManagement1C:
    Type: AWS::EC2::Subnet
    Properties:
      CiderBlock: 10.0.241.0/24
      VpcId:
        Ref: sbcntrVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sbcntr-subnet-public-management-1c
        - Key: Type
          Value: Public
  ## 管理用ルートの紐づけ(Ingressのルートテーブルを使用)
  sbccntrRouteManagementAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteIngress
      SubnetId:
        Ref: sbcntrSubnetPublicManagement1A
  sbccntrRouteManagementAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: sbcntrRouteIngress
      SubnetId:
        Ref: sbcntrSubnetPublicManagement1C
  
  # インターネットゲートウェイ
  sbcntrIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sbcntr-igw
  sbcntrVpcgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: sbcntrVpc
      InternetGatewayId:
        Ref: sbcntrIgw

  # セキュリティグループ
  ## インターネット公開のセキュリティグループ
  sbcntrSgIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Ingress
      GroupName: Ingress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          Description: from ::/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: sbcntr-sg-ingress
      VpcId:
        Ref: sbcntrVpc
    ## 管理者用サーバー向けのセキュリティグループ
    sbcntrSgManagement:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group of management server
        GroupName: management
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: Allow all outbound traffic by default
            IpProtocol: "-1"
        Tags:
          - Key: Name
            Value: sbcntr-sg-management
        VpcId:
          Ref: sbcntrVpc
    ## バックエンドコンテナアプリ用セキュリティグループ
    sbcntrSgContainer:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Groupt of backend app
        GroupName: container
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: Allow all outbound traffic by default
            IpProtocol: "-1"
        Tags:
          - Key: Name
            Value: sbcntr-sg-container
        VpcId:
          Ref: sbcntrVpc
    ## フロントエンドコンテナアプリ用セキュリティグループ
    sbcntrSgFrontContainer:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Sercurity Group of front container app
        GroupName: front-container
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: Allow all outbound traffic by default
            IpProtocol: "-1"
        Tags:
          - Key: Name
            Value: sbcntr-sg-front-container
        VpcId:
          Ref: sbcntrVpc
    ## 内部用ロードバランサ用セキュリティグループ
    sbcntrSgInternal:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for internal load balancer
        GroupName: internal
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: Allow all outbound traffic by default
            IpProtocol: "-1"
        Tags:
          - Key: Name
            Value: sbcntr-sg-internal
        VpcId:
          Ref: sbcntrVpc
    sbcntrSgDb:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group of database
        GroupName: database
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            Description: Allow all outbound traffic by default
            IpProtocol: "-1"
        Tags:
          - Key: Name
            Value: sbcntr-sg-db
        VpcId:
          Ref: sbcntrVpc
    # ルール紐づけ
    ## Internet LB → Back Container
    sbcntrSgFrontContainerFromSgIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: HTTP for Ingress
        FromPort: 80
        GroupId:
          Fn::GetAtt:
            - sbcntrSgFrontContainer
            - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgIngress
            - GroupId
        ToPort: 80
    ## Front Container → Internal LB
    sbcntrSgInternalFromSgFrontContainer:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: HTTP for front container
        FromPort: 80
        GroupId:
          Fn::GetAtt:
            - sbcntrSgInternal
            - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgFrontContainer
            - GroupId
        ToPort: 80
    ## Internal LB → Back Container
    sbcntrSgContainerFromSgInternal:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: HTTP for internal LB
        FromPort: 80
        GroupId:
          Fn::GetAtt:
            - sbcntrSgContainer
            - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgInternal
            - GroupId
        ToPort: 80
    ## Back Contaner → DB
    sbcntrSgDbFromSgContainer:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: MySQL protocol from backend app
        FromPort: 3306
        GroupId:
          Fn::GetAtt:
            - sbcntrSgDb
            - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgContainer
            - GroupId
        ToPort: 3306
    ## Front Container → DB
    sbcntrSgDbFromSgFrontContainerTCP:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: MySQL protocol from frontend App
        FromPort: 3306
        GroupId:
          Fn::GetAtt:
            - sbcntrSgDb
            - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgFrontContainer
            - GroupId
        ToPort: 3306
    ## Management server → DB
    sbcntrSgInternalFromSgManagementTCP:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        Description: HTTP for management server
        FromPort: 80
        GroupId:
          - sbcntrSgInternal
          - GroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
            - sbcntrSgManagement
            - GroupId
        ToPort: 80
